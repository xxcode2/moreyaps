
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?          // <â€” WAJIB ADA
  image     String?
  points    Int      @default(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts  Account[]
  sessions  Session[]
  tasks     Task[]    @relation("UserTasks")
  claims    Claim[]
}

model Task {
  id            String   @id @default(cuid())
  type          TaskType
  tweetUrl      String
  rewardPoints  Int
  maxClaims     Int
  claimsCount   Int      @default(0)
  escrow        Int      @default(0)
  status        TaskStatus @default(ACTIVE)
  creator       User     @relation("UserTasks", fields: [creatorId], references: [id])
  creatorId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  claims        Claim[]
}

model Claim {
  id         String   @id @default(cuid())
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String
  worker     User     @relation(fields: [workerId], references: [id])
  workerId   String
  proofUrl   String
  status     ClaimStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum TaskType {
  FOLLOW
  LIKE
  RETWEET
  REPLY
  QUOTE
}

enum TaskStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
